source /usr/share/defaults/etc/profile
export JAVA_HOME=/usr/lib64/openjdk-17
export PATH=/opt/lampp/bin:$JAVA_HOME/bin:$PATH
# sudo ln -s /usr/lib64/openjdk-17/bin/java /usr/bin/java
test -s ~/.alias && . ~/.alias || true
kopiraj_fun() {
    # Definiraj spremenljivko z izključenimi mapami
    exclude_maps='.config/containers .cache .local/share/containers'

    if [ "$#" -ge 2 ]; then
        echo -n "Ste prepričani, da želite nadaljevati? (D/N): "
        read -r odgovor
        odgovor=$(echo "$odgovor" | tr '[:upper:]' '[:lower:]')

        if [ "$odgovor" = "d" ]; then
            # Izdelaj parameter za --exclude za vsako mapo v spremenljivki exclude_maps
            exclude_params=""
            for map in $exclude_maps; do
                exclude_params="$exclude_params --exclude='$map'"
            done

            # Izvedi rsync z dinamično dodanimi parametri
            sudo rsync -a --info=progress2 --delete $exclude_params "$@"
        else
            echo "Operacija preklicana."
        fi
    else
        echo "Uporaba: kopiraj vir cilj [dodatni parametri rsync]"
    fi
}
alias kopiraj='kopiraj_fun'
#
gpt() {
  local prompt="$*"
  local response=$(curl -s https://api.openai.com/v1/chat/completions \
    -H "Content-Type: application/json" \
    -H "Authorization: Bearer $OPENAI_API_KEY" \
    -d "{
      \"model\": \"gpt-4o-mini\",
      \"messages\": [
        {
          \"role\": \"system\",
          \"content\": \"za računanje uporabi python knjižnice, za odgovore uporabi slovenščino, za valute uporabi EUR in znak €, za odgovore porabi do največ 250 znakov, bodi zelo kratek v odgovorih\"
        },
        {
          \"role\": \"user\",
          \"content\": \"${prompt}\"
        }
      ]
    }")
  echo "$response" | jq -r '.choices[0].message.content'
}
#
fixgd() {
    if [ -f "$1" ]; then
        sed -i 's/"showWatermark": true/"showWatermark": false/g' "$1"
        sed -i 's/"showGDevelopSplash": true/"showGDevelopSplash": false/g' "$1"
        sed -i 's/"showProgressBar": true/"showProgressBar": false/g' "$1"
        echo "Datoteka '$1' je bila uspešno posodobljena."
    else
        echo "Napaka: Datoteka '$1' ne obstaja."
    fi
}
export EDITOR=nano
export VISUAL=nano
alias top='btop'
toutf8() {
    for file in *.srt; do
        # Zaznaj kodiranje
        encoding=$(enca -i "$file")

        if [ "$encoding" != "UTF-8" ]; then
            # Pretvori v UTF-8 v začasno datoteko
            if iconv -f "$encoding" -t "UTF-8" "$file" -o "${file}.tmp"; then
                mv "${file}.tmp" "$file"
                echo "$file pretvorjen v UTF-8"
            else
                echo "Napaka pri pretvorbi: $file" >&2
                continue
            fi
        else
            echo "$file je že v UTF-8"
        fi

        # Odstrani <i> in </i>
        sed -i 's/<i>//g; s/<\/i>//g' "$file"
    done
}
alias df='df -H'
alias updatedb='sudo updatedb'
alias locate='sudo locate'
alias bios='sudo dmidecode -s bios-version'
alias reboot='sudo reboot'
alias iotop='sudo iotop'
alias nopassword='sudo usermod -p "" $USER'
alias setpassword='sudo passwd $USER'
alias tar='tar -cvzf'
alias untar='tar -xvzf'
alias makeiso='mkisofs -iso-level 3 -o makeiso.iso .'
alias iotop='sudo iotop -o'
alias spremembe="find . -type f -printf '%T@ %p\n' | sort -n | tail -n 10"
alias icons_restore="cp /home/$USER/.local/share/gvfs-metadata/home.$USER /home/$USER/.local/share/gvfs-metadata/home"
alias icons_backup="cp /home/$USER/.local/share/gvfs-metadata/home /home/$USER/.local/share/gvfs-metadata/home.$USER"
alias fixopenfolder='xdg-mime default org.gnome.Nautilus.desktop inode/directory'
alias fixwinesound='mkdir -p /home/$USER/.local/share/pipewire/pipewire-pulse.conf.d; echo "pulse.rules = [{matches = [{application.process.binary = \"wine64-preloader\" }], actions = {update-props = {pulse.min.quantum = 1024/48000}}}] " | tee /home/$USER/.local/share/pipewire/pipewire-pulse.conf.d/wine_gaming.conf > /dev/null'
alias fixwinesoundsys='sudo mkdir -p /usr/share/pipewire/pipewire-pulse.conf.d && echo "pulse.rules = [{matches = [{application.process.binary = \"wine64-preloader\" }], actions = {update-props = {pulse.min.quantum = 1024/48000}}}]" | sudo tee /usr/share/pipewire/pipewire-pulse.conf.d/wine_gaming.conf > /dev/null'
alias fixflatpakicons='flatpak --user override --filesystem=~/.local/share/icons/:ro'
alias fixflatpak='flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo'
alias fixicons='gsettings set org.gnome.desktop.interface icon-theme "Hatter"'
alias fixmaxsound="gsettings set org.gnome.desktop.sound allow-volume-above-100-percent 'true'"
alias fixwait="gsettings set org.gnome.mutter check-alive-timeout 60000"
alias fixlaptoplid="sudo mkdir -p '/etc/systemd/logind.conf.d'; echo -e \"[Login]\\nHandleLidSwitch=ignore\" | sudo tee '/etc/systemd/logind.conf.d/99-laptop-server.conf' > '/dev/null'"
alias fixaddtog1="if grep -q wheel /etc/group; then sudo usermod -a -G wheel $USER; else echo 'Skupina wheel ne obstaja'; fi"
alias fixaddtog2="if grep -q vboxusers /etc/group; then sudo usermod -a -G vboxusers $USER; else echo 'Skupina vboxusers ne obstaja'; fi"
alias fixaddtog3="if grep -q gamemode /etc/group; then sudo usermod -a -G gamemode $USER; else echo 'Skupina gamemode ne obstaja'; fi"
alias fixaddtog4="if grep -q libvirt /etc/group; then sudo usermod -a -G libvirt,kvm,qemu $USER; else echo 'Skupina libvirt ne obstaja'; fi"
alias fixwindowbuttons='gsettings set org.gnome.desktop.wm.preferences button-layout "appmenu:minimize,maximize,close"'
alias fixlocalhost="sudo hostnamectl set-hostname namiznik"
alias fixzram='echo -e "[zram0]\nzram-size = min(ram, 8192)\ncompression-algorithm = zstd" | sudo tee /usr/lib/systemd/zram-generator.conf'
alias fixmaxmapcount='sudo mkdir -p /etc/sysctl.d; echo -e "vm.max_map_count = 2000000" | sudo tee /etc/sysctl.d/10-custom.conf'
alias fixkvm="sudo systemctl enable --now libvirtd"
alias fixnmwos="sudo systemctl disable NetworkManager-wait-online.service"
alias fixterminal="gsettings set org.gnome.desktop.default-applications.terminal exec '/usr/bin/ptyxis'"
alias fixvirbox='echo "options kvm enable_virt_at_load=0" | sudo tee /usr/lib/modprobe.d/virtualbox.conf'
alias fixm2026='sudo ln -s /opt/smfp-common/printer/bin/rastertospl /usr/lib/cups/filter/rastertosplc'
alias fixdbox="sudo touch /etc/subuid /etc/subgid && sudo chmod 644 /etc/subuid /etc/subgid && sudo usermod --add-subuids 100000-165536 --add-subgids 100000-165536 $USER"
alias fixpodman1='sudo touch /etc/subuid /etc/subgid; sudo usermod --add-subuids 100000-165535 --add-subgids 100000-165535 $USER'
alias fixpodman2='mkdir -p $HOME/.config/containers && echo -e "[engine]\nruntime = \"crun\"" > $HOME/.config/containers/containers.conf'
alias fixwaydnet='sudo ufw allow 53 && sudo ufw allow 67 && sudo ufw default allow FORWARD'
alias fixbtrfs='sudo btrfs quota disable /'
cleanoldkernels() { current=$(uname -r | sed "s/-.*//"); kernels=($(eopkg list-installed | awk '/^linux-/{print $1}' | sort -V -r)); active=""; for k in "${kernels[@]}"; do ver=${k#linux-}; [[ "$current" == "$ver"* ]] && { active=$k; break; }; done; [[ -z "$active" ]] && return; [[ "${kernels[0]}" == "$active" ]] && penultimate=${kernels[1]} || penultimate=${kernels[0]}; for k in "${kernels[@]}"; do [[ "$k" != "$active" && "$k" != "$penultimate" ]] && sudo eopkg remove -y "$k"; done; }
alias toac3='f(){ [ -z "$1" ] && echo "⚠️ Uporaba: dts2ac3 <datoteka.mkv>" && return 1; [ ! -f "$1" ] && echo "❌ Napaka: datoteka ne obstaja." && return 1; ffmpeg -i "$1" -map 0 -c:v copy -c:a ac3 -b:a 640k -c:s copy "${1%.*}_ac3.mkv"; }; f'
alias spisek='ls -1d */ | sed "s:/$::" | awk "{print \"flatpak install -y -u flathub \" \$0}" > spisek'
alias db='distrobox'
alias ubuntu='distrobox enter ubuntu'
alias backup="kopiraj /home/barko/ /run/media/barko/L_BACKUPS/barko/"
alias xampp="sudo /opt/lampp/xampp"
alias xs="echo 'Re/Start xampp...'; xampp restart &>/dev/null; echo 'Ok'"
alias xst="echo 'Stop xampp...'; xampp stop &>/dev/null; echo 'Ok'"
alias fixrtw88='sudo mkdir -p /etc/modprobe.d && echo "blacklist rtw88_8822bu" | sudo tee /etc/modprobe.d/rtw8822bu.conf > /dev/null'
alias fixjava='sudo rm /usr/bin/java; sudo ln -s /usr/lib64/openjdk-17/bin/java /usr/bin/java'
alias fixspicecap='f=$(find /usr -name spice-client-glib-usb-acl-helper 2>/dev/null | head -n1) && (getcap "$f" | grep -q cap && sudo setcap -r "$f" && echo "✔ Capabilities removed from $f" || echo "ℹ️  No capabilities to remove in $f")'
alias fixmailspring='xdg-mime default Mailspring.desktop x-scheme-handler/mailto'
#
exportpod() {
  if [ -z "$1" ]; then
    echo "Uporaba: exportpod <ime_kontejnerja>"
  elif podman container exists "$1"; then
    podman export -o "$1.tar" "$1"
  else
    echo "Kontejner '$1' ne obstaja"
  fi
}
#
importpod() {
  if [ -z "$1" ]; then
    echo "Uporaba: importpod <ime_datoteke.tar>"
  elif [ -f "$1" ]; then
    podman import "$1"
  else
    echo "Datoteka '$1' ne obstaja"
  fi
}
#
ffsys() {
  mkdir -p srts && \
  find . -maxdepth 1 -type f \( -iname "*.mp4" -o -iname "*.mkv" -o -iname "*.avi" \) | while read -r video; do
    srt="${video%.*}.srt"
    [ -f "$srt" ] || continue
    cp "$srt" srts/ && ffsubsync "$video" -i "$srt" -o "$srt"
  done
}
#
function fixbroken {
  ( sudo eopkg check 2>&1 || true ) | tee /dev/stderr \
    | awk '/^Broken/ { print $4 } /Cannot calculate SHA1 hash of/ { print $NF }' \
    | while read -r item; do
        pkg=$(eopkg whatprovides "$item" 2>/dev/null | head -n1)
        if [ -n "$pkg" ]; then
          echo "Reinstalliram: $pkg"
          sudo eopkg it --reinstall "$pkg"
        else
          echo "Opozorilo: ne najdem paketa za »$item«"
        fi
      done
}
#
compilepy() {
    local file="$1"
    local filename="$(basename "$file" .py)"

    echo "Kompiliram $file..."
    pyinstaller --onefile --windowed "$file" || {
        echo "Napaka med izvajanjem PyInstallerja."
        return 1
    }

    local executable="dist/$filename"
    if [ -f "$executable" ]; then
        echo "Premikam izvršljivo datoteko v trenutno mapo..."
        mv "$executable" . || {
            echo "Premik ni uspel."
            return 1
        }
    else
        echo "Napaka: izvršljiva datoteka $executable ni bila ustvarjena."
        return 1
    fi

    echo "Odstranjujem build, dist in .spec datoteko..."
    rm -rf build dist "$filename.spec"
    echo "Končano."
}
get_wmclass_interactive() {
  # izberi okno
  local wid=$(xdotool selectwindow)
  # vrni razred
  xprop -id "$wid" WM_CLASS | awk -F\" '{ print $4 }'
}
alias py='python3 $1'
alias wd_restart='sudo systemctl restart waydroid-container.service'
alias wifi-power-disable='echo -e "[connection]\nwifi.powersave = 2" | sudo tee /etc/NetworkManager/conf.d/wifi-powersave-off.conf > /dev/null && sudo systemctl restart NetworkManager'
alias myinstall_rm='sudo eopkg rm -y celluloid snapshot solus-sc solus-sc-icons'
alias myinstall_dev='sudo eopkg it -y -c system.devel git linux-current-headers'
alias myinstall='sudo eopkg it -y fonts-installer parallel nethogs gnome-software diodon python3-tkinter pip waydroid gufw upx xdotool iw enca btop firejail binutils rhythmbox gnome-disk-utility plocate localsend rsync transmission yarn nodejs filezilla distrobox gnome-boxes lutris steam jq mc neofetch sshpass openjdk-17'
#
alias fixall="myinstall_rm; myinstall; myinstall_dev; fixflatpak; fixmailspring; fixspicecap; fixjava; fixdbox; fixpodman1; fixmaxmapcount; fixvirbox; fixwinesound; fixflatpakicons; fixmaxsound; fixwait; fixaddtog1; fixaddtog2; fixaddtog3; fixaddtog4;wifi-power-disable"
alias nethogs='sudo nethogs'
alias e='sudo eopkg'
alias cleanup='sudo journalctl --vacuum-time=2d; sudo eopkg dc -y; sudo eopkg rmo -y; flatpak remove --unused -y'
alias upg='sudo eopkg upgrade -y; flatpak update -y'
if [ -z "$CONTAINER_ID" ]; then
	neofetch
fi
